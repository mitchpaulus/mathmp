//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, GREEK=3, APPROX=4, CDOT=5, SQUARED=6, CARET=7, LPAREN=8, 
		RPAREN=9, LSQUARE=10, RSQUARE=11, LBRACE=12, RBRACE=13, OPERATOR=14, FORWARDSLASH=15, 
		STRING=16, SINGLE_QUOTE_STR=17, DOT=18, SQRT=19, IDENTIFIER=20, PERIOD=21, 
		NUMBER=22, WS=23, COMMENT=24;
	public const int
		RULE_file = 0, RULE_math = 1, RULE_expression = 2, RULE_operator = 3, 
		RULE_identifier = 4, RULE_number = 5, RULE_greek = 6, RULE_abbrev = 7;
	public static readonly string[] ruleNames = {
		"file", "math", "expression", "operator", "identifier", "number", "greek", 
		"abbrev"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", null, "'approx'", "'cdot'", "'\\u00B2'", "'^'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", null, "'/'", null, null, "'dot'", 
		"'sqrt'", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "SINGLE_QUOTE_STR", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MathmpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MathmpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 17;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__0) {
						{
						State = 16;
						Match(T__0);
						}
					}

					State = 19;
					Match(T__1);
					}
					} 
				}
				State = 24;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6247742L) != 0)) {
				{
				{
				State = 25;
				math();
				State = 30;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 27;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__0) {
							{
							State = 26;
							Match(T__0);
							}
						}

						State = 29;
						Match(T__1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 32;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 2, RULE_math);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6247736L) != 0)) {
				{
				{
				State = 39;
				expression(0);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterIdentifierExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitIdentifierExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperscriptExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(MathmpParser.CARET, 0); }
		public SuperscriptExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSuperscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSuperscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperscriptExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperatorExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterOperatorExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitOperatorExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MathmpParser.STRING, 0); }
		public StringExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SquaredExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUARED() { return GetToken(MathmpParser.SQUARED, 0); }
		public SquaredExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSquaredExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSquaredExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquaredExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MathmpParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SqrtExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSqrtExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSqrtExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SquareExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE() { return GetToken(MathmpParser.LSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE() { return GetToken(MathmpParser.RSQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SquareExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSquareExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSquareExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreekExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public GreekContext greek() {
			return GetRuleContext<GreekContext>(0);
		}
		public GreekExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterGreekExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitGreekExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreekExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH() { return GetToken(MathmpParser.FORWARDSLASH, 0); }
		public DivExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MathmpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DotExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterDotExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitDotExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(MathmpParser.PERIOD, 0); }
		public SubscriptExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSubscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSubscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MathmpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MathmpParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParenExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MathmpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MathmpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BracedExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterBracedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitBracedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleQuoteStrExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTE_STR() { return GetToken(MathmpParser.SINGLE_QUOTE_STR, 0); }
		public SingleQuoteStrExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSingleQuoteStrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSingleQuoteStrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQuoteStrExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbbrevExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbbrevContext abbrev() {
			return GetRuleContext<AbbrevContext>(0);
		}
		public AbbrevExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterAbbrevExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitAbbrevExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbbrevExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				{
				_localctx = new BracedExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 46;
				Match(LBRACE);
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6247736L) != 0)) {
					{
					{
					State = 47;
					expression(0);
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 53;
				Match(RBRACE);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 54;
				Match(LPAREN);
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6247736L) != 0)) {
					{
					{
					State = 55;
					expression(0);
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 61;
				Match(RPAREN);
				}
				break;
			case LSQUARE:
				{
				_localctx = new SquareExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62;
				Match(LSQUARE);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6247736L) != 0)) {
					{
					{
					State = 63;
					expression(0);
					}
					}
					State = 68;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 69;
				Match(RSQUARE);
				}
				break;
			case DOT:
				{
				_localctx = new DotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70;
				Match(DOT);
				State = 71;
				expression(13);
				}
				break;
			case SQRT:
				{
				_localctx = new SqrtExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				Match(SQRT);
				State = 73;
				expression(8);
				}
				break;
			case OPERATOR:
				{
				_localctx = new OperatorExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 74;
				@operator();
				}
				break;
			case APPROX:
			case CDOT:
				{
				_localctx = new AbbrevExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75;
				abbrev();
				}
				break;
			case SINGLE_QUOTE_STR:
				{
				_localctx = new SingleQuoteStrExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				Match(SINGLE_QUOTE_STR);
				}
				break;
			case STRING:
				{
				_localctx = new StringExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78;
				identifier();
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79;
				number();
				}
				break;
			case GREEK:
				{
				_localctx = new GreekExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80;
				greek();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 96;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 94;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new SubscriptExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 83;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 84;
						Match(PERIOD);
						State = 85;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new SuperscriptExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 86;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 87;
						Match(CARET);
						State = 88;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new DivExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 89;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 90;
						Match(FORWARDSLASH);
						State = 91;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new SquaredExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 92;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 93;
						Match(SQUARED);
						}
						break;
					}
					} 
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERATOR() { return GetTokens(MathmpParser.OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR(int i) {
			return GetToken(MathmpParser.OPERATOR, i);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_operator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 99;
					Match(OPERATOR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MathmpParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MathmpParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GreekContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREEK() { return GetTokens(MathmpParser.GREEK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK(int i) {
			return GetToken(MathmpParser.GREEK, i);
		}
		public GreekContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_greek; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterGreek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitGreek(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreek(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GreekContext greek() {
		GreekContext _localctx = new GreekContext(Context, State);
		EnterRule(_localctx, 12, RULE_greek);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 108;
					Match(GREEK);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbbrevContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPROX() { return GetToken(MathmpParser.APPROX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDOT() { return GetToken(MathmpParser.CDOT, 0); }
		public AbbrevContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abbrev; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterAbbrev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitAbbrev(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbbrev(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbbrevContext abbrev() {
		AbbrevContext _localctx = new AbbrevContext(Context, State);
		EnterRule(_localctx, 14, RULE_abbrev);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==APPROX || _la==CDOT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,24,116,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,3,0,18,8,0,1,0,5,0,21,8,0,10,0,12,0,24,9,0,1,0,1,0,3,0,28,8,0,
		1,0,4,0,31,8,0,11,0,12,0,32,5,0,35,8,0,10,0,12,0,38,9,0,1,1,5,1,41,8,1,
		10,1,12,1,44,9,1,1,2,1,2,1,2,5,2,49,8,2,10,2,12,2,52,9,2,1,2,1,2,1,2,5,
		2,57,8,2,10,2,12,2,60,9,2,1,2,1,2,1,2,5,2,65,8,2,10,2,12,2,68,9,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,82,8,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,95,8,2,10,2,12,2,98,9,2,1,3,4,3,101,8,
		3,11,3,12,3,102,1,4,1,4,1,5,1,5,1,6,4,6,110,8,6,11,6,12,6,111,1,7,1,7,
		1,7,0,1,4,8,0,2,4,6,8,10,12,14,0,1,1,0,4,5,133,0,22,1,0,0,0,2,42,1,0,0,
		0,4,81,1,0,0,0,6,100,1,0,0,0,8,104,1,0,0,0,10,106,1,0,0,0,12,109,1,0,0,
		0,14,113,1,0,0,0,16,18,5,1,0,0,17,16,1,0,0,0,17,18,1,0,0,0,18,19,1,0,0,
		0,19,21,5,2,0,0,20,17,1,0,0,0,21,24,1,0,0,0,22,20,1,0,0,0,22,23,1,0,0,
		0,23,36,1,0,0,0,24,22,1,0,0,0,25,30,3,2,1,0,26,28,5,1,0,0,27,26,1,0,0,
		0,27,28,1,0,0,0,28,29,1,0,0,0,29,31,5,2,0,0,30,27,1,0,0,0,31,32,1,0,0,
		0,32,30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,0,34,25,1,0,0,0,35,38,1,0,0,
		0,36,34,1,0,0,0,36,37,1,0,0,0,37,1,1,0,0,0,38,36,1,0,0,0,39,41,3,4,2,0,
		40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,3,1,0,0,0,44,
		42,1,0,0,0,45,46,6,2,-1,0,46,50,5,12,0,0,47,49,3,4,2,0,48,47,1,0,0,0,49,
		52,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,53,1,0,0,0,52,50,1,0,0,0,53,
		82,5,13,0,0,54,58,5,8,0,0,55,57,3,4,2,0,56,55,1,0,0,0,57,60,1,0,0,0,58,
		56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,58,1,0,0,0,61,82,5,9,0,0,62,
		66,5,10,0,0,63,65,3,4,2,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,
		67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,0,0,69,82,5,11,0,0,70,71,5,18,0,0,71,
		82,3,4,2,13,72,73,5,19,0,0,73,82,3,4,2,8,74,82,3,6,3,0,75,82,3,14,7,0,
		76,82,5,17,0,0,77,82,5,16,0,0,78,82,3,8,4,0,79,82,3,10,5,0,80,82,3,12,
		6,0,81,45,1,0,0,0,81,54,1,0,0,0,81,62,1,0,0,0,81,70,1,0,0,0,81,72,1,0,
		0,0,81,74,1,0,0,0,81,75,1,0,0,0,81,76,1,0,0,0,81,77,1,0,0,0,81,78,1,0,
		0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,96,1,0,0,0,83,84,10,11,0,0,84,85,5,
		21,0,0,85,95,3,4,2,12,86,87,10,10,0,0,87,88,5,7,0,0,88,95,3,4,2,11,89,
		90,10,9,0,0,90,91,5,15,0,0,91,95,3,4,2,10,92,93,10,12,0,0,93,95,5,6,0,
		0,94,83,1,0,0,0,94,86,1,0,0,0,94,89,1,0,0,0,94,92,1,0,0,0,95,98,1,0,0,
		0,96,94,1,0,0,0,96,97,1,0,0,0,97,5,1,0,0,0,98,96,1,0,0,0,99,101,5,14,0,
		0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,7,
		1,0,0,0,104,105,5,20,0,0,105,9,1,0,0,0,106,107,5,22,0,0,107,11,1,0,0,0,
		108,110,5,3,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,
		1,0,0,0,112,13,1,0,0,0,113,114,7,0,0,0,114,15,1,0,0,0,14,17,22,27,32,36,
		42,50,58,66,81,94,96,102,111
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
