//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, GREEK=3, APPROX=4, CDOT=5, SQUARED=6, CARET=7, LPAREN=8, 
		RPAREN=9, LSQUARE=10, RSQUARE=11, LBRACE=12, RBRACE=13, OPERATOR=14, FORWARDSLASH=15, 
		STRING=16, SINGLE_QUOTE_STR=17, DOT=18, SQRT=19, IDENTIFIER=20, PERIOD=21, 
		NUMBER=22, WS=23, COMMENT=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "ESC", "SINGLE_QUOTE_STR", "DOT", "SQRT", "IDENTIFIER", "PERIOD", 
		"NUMBER", "WS", "COMMENT"
	};


	public MathmpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathmpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", null, "'approx'", "'cdot'", "'\\u00B2'", "'^'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", null, "'/'", null, null, "'dot'", 
		"'sqrt'", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "SINGLE_QUOTE_STR", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", 
		"WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		3,2,96,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,
		1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
		14,1,14,1,15,1,15,1,15,5,15,133,8,15,10,15,12,15,136,9,15,1,15,1,15,1,
		16,1,16,1,16,1,16,3,16,144,8,16,1,17,1,17,4,17,148,8,17,11,17,12,17,149,
		1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,4,20,162,8,20,11,20,
		12,20,163,1,21,1,21,1,22,4,22,169,8,22,11,22,12,22,170,1,22,1,22,4,22,
		175,8,22,11,22,12,22,176,3,22,179,8,22,1,23,4,23,182,8,23,11,23,12,23,
		183,1,23,1,23,1,24,1,24,1,24,1,24,5,24,192,8,24,10,24,12,24,195,9,24,1,
		24,1,24,1,134,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,0,35,17,37,18,39,19,41,20,43,21,45,22,
		47,23,49,24,1,0,5,7,0,43,45,61,61,176,176,916,916,8706,8706,8776,8776,
		8901,8901,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,215,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,95,1,0,0,0,7,97,1,0,0,
		0,9,104,1,0,0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,113,1,0,0,0,17,115,1,
		0,0,0,19,117,1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,0,0,0,27,125,
		1,0,0,0,29,127,1,0,0,0,31,129,1,0,0,0,33,143,1,0,0,0,35,145,1,0,0,0,37,
		151,1,0,0,0,39,155,1,0,0,0,41,161,1,0,0,0,43,165,1,0,0,0,45,168,1,0,0,
		0,47,181,1,0,0,0,49,187,1,0,0,0,51,52,5,13,0,0,52,2,1,0,0,0,53,54,5,10,
		0,0,54,4,1,0,0,0,55,56,5,100,0,0,56,57,5,101,0,0,57,96,5,108,0,0,58,59,
		5,97,0,0,59,60,5,108,0,0,60,61,5,112,0,0,61,62,5,104,0,0,62,96,5,97,0,
		0,63,64,5,98,0,0,64,65,5,101,0,0,65,66,5,116,0,0,66,96,5,97,0,0,67,68,
		5,103,0,0,68,69,5,97,0,0,69,70,5,109,0,0,70,71,5,109,0,0,71,96,5,97,0,
		0,72,73,5,100,0,0,73,74,5,101,0,0,74,75,5,108,0,0,75,76,5,116,0,0,76,96,
		5,97,0,0,77,78,5,68,0,0,78,79,5,101,0,0,79,80,5,108,0,0,80,81,5,116,0,
		0,81,96,5,97,0,0,82,83,5,114,0,0,83,84,5,104,0,0,84,96,5,111,0,0,85,86,
		5,110,0,0,86,96,5,117,0,0,87,88,5,101,0,0,88,89,5,116,0,0,89,96,5,97,0,
		0,90,91,5,111,0,0,91,92,5,109,0,0,92,93,5,101,0,0,93,94,5,103,0,0,94,96,
		5,97,0,0,95,55,1,0,0,0,95,58,1,0,0,0,95,63,1,0,0,0,95,67,1,0,0,0,95,72,
		1,0,0,0,95,77,1,0,0,0,95,82,1,0,0,0,95,85,1,0,0,0,95,87,1,0,0,0,95,90,
		1,0,0,0,96,6,1,0,0,0,97,98,5,97,0,0,98,99,5,112,0,0,99,100,5,112,0,0,100,
		101,5,114,0,0,101,102,5,111,0,0,102,103,5,120,0,0,103,8,1,0,0,0,104,105,
		5,99,0,0,105,106,5,100,0,0,106,107,5,111,0,0,107,108,5,116,0,0,108,10,
		1,0,0,0,109,110,5,178,0,0,110,12,1,0,0,0,111,112,5,94,0,0,112,14,1,0,0,
		0,113,114,5,40,0,0,114,16,1,0,0,0,115,116,5,41,0,0,116,18,1,0,0,0,117,
		118,5,91,0,0,118,20,1,0,0,0,119,120,5,93,0,0,120,22,1,0,0,0,121,122,5,
		123,0,0,122,24,1,0,0,0,123,124,5,125,0,0,124,26,1,0,0,0,125,126,7,0,0,
		0,126,28,1,0,0,0,127,128,5,47,0,0,128,30,1,0,0,0,129,134,5,34,0,0,130,
		133,3,33,16,0,131,133,9,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,136,
		1,0,0,0,134,135,1,0,0,0,134,132,1,0,0,0,135,137,1,0,0,0,136,134,1,0,0,
		0,137,138,5,34,0,0,138,32,1,0,0,0,139,140,5,92,0,0,140,144,5,34,0,0,141,
		142,5,92,0,0,142,144,5,92,0,0,143,139,1,0,0,0,143,141,1,0,0,0,144,34,1,
		0,0,0,145,147,5,39,0,0,146,148,7,1,0,0,147,146,1,0,0,0,148,149,1,0,0,0,
		149,147,1,0,0,0,149,150,1,0,0,0,150,36,1,0,0,0,151,152,5,100,0,0,152,153,
		5,111,0,0,153,154,5,116,0,0,154,38,1,0,0,0,155,156,5,115,0,0,156,157,5,
		113,0,0,157,158,5,114,0,0,158,159,5,116,0,0,159,40,1,0,0,0,160,162,7,1,
		0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
		42,1,0,0,0,165,166,5,46,0,0,166,44,1,0,0,0,167,169,7,2,0,0,168,167,1,0,
		0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,178,1,0,0,0,172,
		174,5,46,0,0,173,175,7,2,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,
		0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,172,1,0,0,0,178,179,1,0,0,0,
		179,46,1,0,0,0,180,182,7,3,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,
		1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,6,23,0,0,186,48,1,0,0,
		0,187,188,5,47,0,0,188,189,5,47,0,0,189,193,1,0,0,0,190,192,8,4,0,0,191,
		190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,
		0,0,0,195,193,1,0,0,0,196,197,6,24,0,0,197,50,1,0,0,0,12,0,95,132,134,
		143,149,163,170,176,178,183,193,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
