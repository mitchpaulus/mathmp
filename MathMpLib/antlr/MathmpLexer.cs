//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, GREEK=3, APPROX=4, CDOT=5, SQUARED=6, CARET=7, LPAREN=8, 
		RPAREN=9, LSQUARE=10, RSQUARE=11, LBRACE=12, RBRACE=13, OPERATOR=14, FORWARDSLASH=15, 
		STRING=16, SINGLE_QUOTE_STR=17, DOT=18, HAT=19, BAR=20, SQRT=21, IDENTIFIER=22, 
		PERIOD=23, NUMBER=24, WS=25, COMMENT=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "ESC", "SINGLE_QUOTE_STR", "DOT", "HAT", "BAR", "SQRT", "IDENTIFIER", 
		"PERIOD", "NUMBER", "WS", "COMMENT"
	};


	public MathmpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathmpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", null, "'approx'", "'cdot'", "'\\u00B2'", "'^'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", null, "'/'", null, null, "'dot'", 
		"'hat'", "'bar'", "'sqrt'", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", 
		"RPAREN", "LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "SINGLE_QUOTE_STR", "DOT", "HAT", "BAR", "SQRT", "IDENTIFIER", 
		"PERIOD", "NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,105,8,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
		1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,5,15,
		142,8,15,10,15,12,15,145,9,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,153,8,
		16,1,17,1,17,4,17,157,8,17,11,17,12,17,158,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,4,22,179,
		8,22,11,22,12,22,180,1,23,1,23,1,24,4,24,186,8,24,11,24,12,24,187,1,24,
		1,24,4,24,192,8,24,11,24,12,24,193,3,24,196,8,24,1,25,4,25,199,8,25,11,
		25,12,25,200,1,25,1,25,1,26,1,26,1,26,1,26,5,26,209,8,26,10,26,12,26,212,
		9,26,1,26,1,26,1,143,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,0,35,17,37,18,39,19,41,20,43,21,
		45,22,47,23,49,24,51,25,53,26,1,0,5,7,0,43,45,61,61,176,176,916,916,8706,
		8706,8776,8776,8901,8901,2,0,65,90,97,122,1,0,48,57,2,0,9,9,32,32,2,0,
		10,10,13,13,233,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,
		1,0,0,0,3,57,1,0,0,0,5,104,1,0,0,0,7,106,1,0,0,0,9,113,1,0,0,0,11,118,
		1,0,0,0,13,120,1,0,0,0,15,122,1,0,0,0,17,124,1,0,0,0,19,126,1,0,0,0,21,
		128,1,0,0,0,23,130,1,0,0,0,25,132,1,0,0,0,27,134,1,0,0,0,29,136,1,0,0,
		0,31,138,1,0,0,0,33,152,1,0,0,0,35,154,1,0,0,0,37,160,1,0,0,0,39,164,1,
		0,0,0,41,168,1,0,0,0,43,172,1,0,0,0,45,178,1,0,0,0,47,182,1,0,0,0,49,185,
		1,0,0,0,51,198,1,0,0,0,53,204,1,0,0,0,55,56,5,13,0,0,56,2,1,0,0,0,57,58,
		5,10,0,0,58,4,1,0,0,0,59,60,5,100,0,0,60,61,5,101,0,0,61,105,5,108,0,0,
		62,63,5,97,0,0,63,64,5,108,0,0,64,65,5,112,0,0,65,66,5,104,0,0,66,105,
		5,97,0,0,67,68,5,98,0,0,68,69,5,101,0,0,69,70,5,116,0,0,70,105,5,97,0,
		0,71,72,5,103,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,75,5,109,0,0,75,105,
		5,97,0,0,76,77,5,100,0,0,77,78,5,101,0,0,78,79,5,108,0,0,79,80,5,116,0,
		0,80,105,5,97,0,0,81,82,5,68,0,0,82,83,5,101,0,0,83,84,5,108,0,0,84,85,
		5,116,0,0,85,105,5,97,0,0,86,87,5,114,0,0,87,88,5,104,0,0,88,105,5,111,
		0,0,89,90,5,110,0,0,90,105,5,117,0,0,91,92,5,101,0,0,92,93,5,116,0,0,93,
		105,5,97,0,0,94,95,5,111,0,0,95,96,5,109,0,0,96,97,5,101,0,0,97,98,5,103,
		0,0,98,105,5,97,0,0,99,100,5,83,0,0,100,101,5,105,0,0,101,102,5,103,0,
		0,102,103,5,109,0,0,103,105,5,97,0,0,104,59,1,0,0,0,104,62,1,0,0,0,104,
		67,1,0,0,0,104,71,1,0,0,0,104,76,1,0,0,0,104,81,1,0,0,0,104,86,1,0,0,0,
		104,89,1,0,0,0,104,91,1,0,0,0,104,94,1,0,0,0,104,99,1,0,0,0,105,6,1,0,
		0,0,106,107,5,97,0,0,107,108,5,112,0,0,108,109,5,112,0,0,109,110,5,114,
		0,0,110,111,5,111,0,0,111,112,5,120,0,0,112,8,1,0,0,0,113,114,5,99,0,0,
		114,115,5,100,0,0,115,116,5,111,0,0,116,117,5,116,0,0,117,10,1,0,0,0,118,
		119,5,178,0,0,119,12,1,0,0,0,120,121,5,94,0,0,121,14,1,0,0,0,122,123,5,
		40,0,0,123,16,1,0,0,0,124,125,5,41,0,0,125,18,1,0,0,0,126,127,5,91,0,0,
		127,20,1,0,0,0,128,129,5,93,0,0,129,22,1,0,0,0,130,131,5,123,0,0,131,24,
		1,0,0,0,132,133,5,125,0,0,133,26,1,0,0,0,134,135,7,0,0,0,135,28,1,0,0,
		0,136,137,5,47,0,0,137,30,1,0,0,0,138,143,5,34,0,0,139,142,3,33,16,0,140,
		142,9,0,0,0,141,139,1,0,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,144,1,
		0,0,0,143,141,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,34,0,0,
		147,32,1,0,0,0,148,149,5,92,0,0,149,153,5,34,0,0,150,151,5,92,0,0,151,
		153,5,92,0,0,152,148,1,0,0,0,152,150,1,0,0,0,153,34,1,0,0,0,154,156,5,
		39,0,0,155,157,7,1,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,0,0,
		158,159,1,0,0,0,159,36,1,0,0,0,160,161,5,100,0,0,161,162,5,111,0,0,162,
		163,5,116,0,0,163,38,1,0,0,0,164,165,5,104,0,0,165,166,5,97,0,0,166,167,
		5,116,0,0,167,40,1,0,0,0,168,169,5,98,0,0,169,170,5,97,0,0,170,171,5,114,
		0,0,171,42,1,0,0,0,172,173,5,115,0,0,173,174,5,113,0,0,174,175,5,114,0,
		0,175,176,5,116,0,0,176,44,1,0,0,0,177,179,7,1,0,0,178,177,1,0,0,0,179,
		180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,46,1,0,0,0,182,183,5,46,
		0,0,183,48,1,0,0,0,184,186,7,2,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,
		185,1,0,0,0,187,188,1,0,0,0,188,195,1,0,0,0,189,191,5,46,0,0,190,192,7,
		2,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,
		194,196,1,0,0,0,195,189,1,0,0,0,195,196,1,0,0,0,196,50,1,0,0,0,197,199,
		7,3,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,
		0,201,202,1,0,0,0,202,203,6,25,0,0,203,52,1,0,0,0,204,205,5,47,0,0,205,
		206,5,47,0,0,206,210,1,0,0,0,207,209,8,4,0,0,208,207,1,0,0,0,209,212,1,
		0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,
		213,214,6,26,0,0,214,54,1,0,0,0,12,0,104,141,143,152,158,180,187,193,195,
		200,210,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
