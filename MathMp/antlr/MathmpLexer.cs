//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, GREEK=2, APPROX=3, CDOT=4, SQUARED=5, CARET=6, LPAREN=7, RPAREN=8, 
		LSQUARE=9, RSQUARE=10, LBRACE=11, RBRACE=12, OPERATOR=13, FORWARDSLASH=14, 
		STRING=15, SINGLE_QUOTE_STR=16, DOT=17, SQRT=18, IDENTIFIER=19, PERIOD=20, 
		NUMBER=21, WS=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", "RPAREN", 
		"LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "ESC", "SINGLE_QUOTE_STR", "DOT", "SQRT", "IDENTIFIER", "PERIOD", 
		"NUMBER", "WS"
	};


	public MathmpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathmpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\n'", null, "'approx'", "'cdot'", "'\\u00B2'", "'^'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", null, "'/'", null, null, "'dot'", "'sqrt'", 
		null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", "RPAREN", 
		"LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"STRING", "SINGLE_QUOTE_STR", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,22,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,3,1,82,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,14,5,14,119,8,14,10,14,12,14,122,9,14,1,14,
		1,14,1,15,1,15,1,15,1,15,3,15,130,8,15,1,16,1,16,4,16,134,8,16,11,16,12,
		16,135,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,4,19,148,8,19,
		11,19,12,19,149,1,20,1,20,1,21,4,21,155,8,21,11,21,12,21,156,1,21,1,21,
		4,21,161,8,21,11,21,12,21,162,3,21,165,8,21,1,22,4,22,168,8,22,11,22,12,
		22,169,1,22,1,22,1,120,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
		10,21,11,23,12,25,13,27,14,29,15,31,0,33,16,35,17,37,18,39,19,41,20,43,
		21,45,22,1,0,4,6,0,43,45,61,61,176,176,916,916,8706,8706,8776,8776,2,0,
		65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,187,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		0,27,1,0,0,0,0,29,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,81,1,0,0,
		0,5,83,1,0,0,0,7,90,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,
		101,1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,
		0,25,111,1,0,0,0,27,113,1,0,0,0,29,115,1,0,0,0,31,129,1,0,0,0,33,131,1,
		0,0,0,35,137,1,0,0,0,37,141,1,0,0,0,39,147,1,0,0,0,41,151,1,0,0,0,43,154,
		1,0,0,0,45,167,1,0,0,0,47,48,5,10,0,0,48,2,1,0,0,0,49,50,5,100,0,0,50,
		51,5,101,0,0,51,82,5,108,0,0,52,53,5,97,0,0,53,54,5,108,0,0,54,55,5,112,
		0,0,55,56,5,104,0,0,56,82,5,97,0,0,57,58,5,98,0,0,58,59,5,101,0,0,59,60,
		5,116,0,0,60,82,5,97,0,0,61,62,5,103,0,0,62,63,5,97,0,0,63,64,5,109,0,
		0,64,65,5,109,0,0,65,82,5,97,0,0,66,67,5,100,0,0,67,68,5,101,0,0,68,69,
		5,108,0,0,69,70,5,116,0,0,70,82,5,97,0,0,71,72,5,68,0,0,72,73,5,101,0,
		0,73,74,5,108,0,0,74,75,5,116,0,0,75,82,5,97,0,0,76,77,5,114,0,0,77,78,
		5,104,0,0,78,82,5,111,0,0,79,80,5,110,0,0,80,82,5,117,0,0,81,49,1,0,0,
		0,81,52,1,0,0,0,81,57,1,0,0,0,81,61,1,0,0,0,81,66,1,0,0,0,81,71,1,0,0,
		0,81,76,1,0,0,0,81,79,1,0,0,0,82,4,1,0,0,0,83,84,5,97,0,0,84,85,5,112,
		0,0,85,86,5,112,0,0,86,87,5,114,0,0,87,88,5,111,0,0,88,89,5,120,0,0,89,
		6,1,0,0,0,90,91,5,99,0,0,91,92,5,100,0,0,92,93,5,111,0,0,93,94,5,116,0,
		0,94,8,1,0,0,0,95,96,5,178,0,0,96,10,1,0,0,0,97,98,5,94,0,0,98,12,1,0,
		0,0,99,100,5,40,0,0,100,14,1,0,0,0,101,102,5,41,0,0,102,16,1,0,0,0,103,
		104,5,91,0,0,104,18,1,0,0,0,105,106,5,93,0,0,106,20,1,0,0,0,107,108,5,
		123,0,0,108,22,1,0,0,0,109,110,5,125,0,0,110,24,1,0,0,0,111,112,7,0,0,
		0,112,26,1,0,0,0,113,114,5,47,0,0,114,28,1,0,0,0,115,120,5,34,0,0,116,
		119,3,31,15,0,117,119,9,0,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,122,
		1,0,0,0,120,121,1,0,0,0,120,118,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,
		0,123,124,5,34,0,0,124,30,1,0,0,0,125,126,5,92,0,0,126,130,5,34,0,0,127,
		128,5,92,0,0,128,130,5,92,0,0,129,125,1,0,0,0,129,127,1,0,0,0,130,32,1,
		0,0,0,131,133,5,39,0,0,132,134,7,1,0,0,133,132,1,0,0,0,134,135,1,0,0,0,
		135,133,1,0,0,0,135,136,1,0,0,0,136,34,1,0,0,0,137,138,5,100,0,0,138,139,
		5,111,0,0,139,140,5,116,0,0,140,36,1,0,0,0,141,142,5,115,0,0,142,143,5,
		113,0,0,143,144,5,114,0,0,144,145,5,116,0,0,145,38,1,0,0,0,146,148,7,1,
		0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,
		40,1,0,0,0,151,152,5,46,0,0,152,42,1,0,0,0,153,155,7,2,0,0,154,153,1,0,
		0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,164,1,0,0,0,158,
		160,5,46,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,
		0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,158,1,0,0,0,164,165,1,0,0,0,
		165,44,1,0,0,0,166,168,7,3,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,
		1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,22,0,0,172,46,1,0,0,
		0,11,0,81,118,120,129,135,149,156,162,164,169,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
