//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, GREEK=2, APPROX=3, CDOT=4, SQUARED=5, CARET=6, LPAREN=7, RPAREN=8, 
		LSQUARE=9, RSQUARE=10, LBRACE=11, RBRACE=12, OPERATOR=13, FORWARDSLASH=14, 
		DOT=15, SQRT=16, IDENTIFIER=17, PERIOD=18, NUMBER=19, WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", "RPAREN", 
		"LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", "WS"
	};


	public MathmpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathmpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\n'", null, "'approx'", "'cdot'", "'\\u00B2'", "'^'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", null, "'/'", "'dot'", "'sqrt'", null, 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "GREEK", "APPROX", "CDOT", "SQUARED", "CARET", "LPAREN", "RPAREN", 
		"LSQUARE", "RSQUARE", "LBRACE", "RBRACE", "OPERATOR", "FORWARDSLASH", 
		"DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,143,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,74,8,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,16,4,16,118,8,16,11,16,12,16,119,1,17,1,17,1,
		18,4,18,125,8,18,11,18,12,18,126,1,18,1,18,4,18,131,8,18,11,18,12,18,132,
		3,18,135,8,18,1,19,4,19,138,8,19,11,19,12,19,139,1,19,1,19,0,0,20,1,1,
		3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,1,0,4,6,0,43,45,61,61,176,176,916,916,8706,
		8706,8776,8776,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,153,0,1,
		1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
		13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
		0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,73,1,0,0,0,5,75,
		1,0,0,0,7,82,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,
		0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,25,103,
		1,0,0,0,27,105,1,0,0,0,29,107,1,0,0,0,31,111,1,0,0,0,33,117,1,0,0,0,35,
		121,1,0,0,0,37,124,1,0,0,0,39,137,1,0,0,0,41,42,5,10,0,0,42,2,1,0,0,0,
		43,44,5,100,0,0,44,45,5,101,0,0,45,74,5,108,0,0,46,47,5,97,0,0,47,48,5,
		108,0,0,48,49,5,112,0,0,49,50,5,104,0,0,50,74,5,97,0,0,51,52,5,98,0,0,
		52,53,5,101,0,0,53,54,5,116,0,0,54,74,5,97,0,0,55,56,5,103,0,0,56,57,5,
		97,0,0,57,58,5,109,0,0,58,59,5,109,0,0,59,74,5,97,0,0,60,61,5,100,0,0,
		61,62,5,101,0,0,62,63,5,108,0,0,63,64,5,116,0,0,64,74,5,97,0,0,65,66,5,
		68,0,0,66,67,5,101,0,0,67,68,5,108,0,0,68,69,5,116,0,0,69,74,5,97,0,0,
		70,71,5,114,0,0,71,72,5,104,0,0,72,74,5,111,0,0,73,43,1,0,0,0,73,46,1,
		0,0,0,73,51,1,0,0,0,73,55,1,0,0,0,73,60,1,0,0,0,73,65,1,0,0,0,73,70,1,
		0,0,0,74,4,1,0,0,0,75,76,5,97,0,0,76,77,5,112,0,0,77,78,5,112,0,0,78,79,
		5,114,0,0,79,80,5,111,0,0,80,81,5,120,0,0,81,6,1,0,0,0,82,83,5,99,0,0,
		83,84,5,100,0,0,84,85,5,111,0,0,85,86,5,116,0,0,86,8,1,0,0,0,87,88,5,178,
		0,0,88,10,1,0,0,0,89,90,5,94,0,0,90,12,1,0,0,0,91,92,5,40,0,0,92,14,1,
		0,0,0,93,94,5,41,0,0,94,16,1,0,0,0,95,96,5,91,0,0,96,18,1,0,0,0,97,98,
		5,93,0,0,98,20,1,0,0,0,99,100,5,123,0,0,100,22,1,0,0,0,101,102,5,125,0,
		0,102,24,1,0,0,0,103,104,7,0,0,0,104,26,1,0,0,0,105,106,5,47,0,0,106,28,
		1,0,0,0,107,108,5,100,0,0,108,109,5,111,0,0,109,110,5,116,0,0,110,30,1,
		0,0,0,111,112,5,115,0,0,112,113,5,113,0,0,113,114,5,114,0,0,114,115,5,
		116,0,0,115,32,1,0,0,0,116,118,7,1,0,0,117,116,1,0,0,0,118,119,1,0,0,0,
		119,117,1,0,0,0,119,120,1,0,0,0,120,34,1,0,0,0,121,122,5,46,0,0,122,36,
		1,0,0,0,123,125,7,2,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,
		0,126,127,1,0,0,0,127,134,1,0,0,0,128,130,5,46,0,0,129,131,7,2,0,0,130,
		129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,135,1,
		0,0,0,134,128,1,0,0,0,134,135,1,0,0,0,135,38,1,0,0,0,136,138,7,3,0,0,137,
		136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,141,1,
		0,0,0,141,142,6,19,0,0,142,40,1,0,0,0,7,0,73,119,126,132,134,139,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
