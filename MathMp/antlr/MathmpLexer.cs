//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, GREEK=2, CARET=3, LPAREN=4, RPAREN=5, LBRACE=6, RBRACE=7, OPERATOR=8, 
		FORWARDSLASH=9, DOT=10, SQRT=11, IDENTIFIER=12, PERIOD=13, NUMBER=14, 
		WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "GREEK", "CARET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "OPERATOR", 
		"FORWARDSLASH", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", "WS"
	};


	public MathmpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathmpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\n'", null, "'^'", "'('", "')'", "'{'", "'}'", null, "'/'", "'dot'", 
		"'sqrt'", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "GREEK", "CARET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"OPERATOR", "FORWARDSLASH", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,110,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,61,8,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,11,4,11,87,8,11,11,11,12,11,88,1,12,1,12,1,13,4,13,94,
		8,13,11,13,12,13,95,1,13,1,13,4,13,100,8,13,11,13,12,13,101,1,14,4,14,
		105,8,14,11,14,12,14,106,1,14,1,14,0,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,0,4,5,0,43,43,45,45,
		61,61,916,916,8706,8706,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
		118,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,60,
		1,0,0,0,5,62,1,0,0,0,7,64,1,0,0,0,9,66,1,0,0,0,11,68,1,0,0,0,13,70,1,0,
		0,0,15,72,1,0,0,0,17,74,1,0,0,0,19,76,1,0,0,0,21,80,1,0,0,0,23,86,1,0,
		0,0,25,90,1,0,0,0,27,93,1,0,0,0,29,104,1,0,0,0,31,32,5,10,0,0,32,2,1,0,
		0,0,33,34,5,100,0,0,34,35,5,101,0,0,35,61,5,108,0,0,36,37,5,97,0,0,37,
		38,5,108,0,0,38,39,5,112,0,0,39,40,5,104,0,0,40,61,5,97,0,0,41,42,5,98,
		0,0,42,43,5,101,0,0,43,44,5,116,0,0,44,61,5,97,0,0,45,46,5,103,0,0,46,
		47,5,97,0,0,47,48,5,109,0,0,48,49,5,109,0,0,49,61,5,97,0,0,50,51,5,100,
		0,0,51,52,5,101,0,0,52,53,5,108,0,0,53,54,5,116,0,0,54,61,5,97,0,0,55,
		56,5,68,0,0,56,57,5,101,0,0,57,58,5,108,0,0,58,59,5,116,0,0,59,61,5,97,
		0,0,60,33,1,0,0,0,60,36,1,0,0,0,60,41,1,0,0,0,60,45,1,0,0,0,60,50,1,0,
		0,0,60,55,1,0,0,0,61,4,1,0,0,0,62,63,5,94,0,0,63,6,1,0,0,0,64,65,5,40,
		0,0,65,8,1,0,0,0,66,67,5,41,0,0,67,10,1,0,0,0,68,69,5,123,0,0,69,12,1,
		0,0,0,70,71,5,125,0,0,71,14,1,0,0,0,72,73,7,0,0,0,73,16,1,0,0,0,74,75,
		5,47,0,0,75,18,1,0,0,0,76,77,5,100,0,0,77,78,5,111,0,0,78,79,5,116,0,0,
		79,20,1,0,0,0,80,81,5,115,0,0,81,82,5,113,0,0,82,83,5,114,0,0,83,84,5,
		116,0,0,84,22,1,0,0,0,85,87,7,1,0,0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,
		1,0,0,0,88,89,1,0,0,0,89,24,1,0,0,0,90,91,5,46,0,0,91,26,1,0,0,0,92,94,
		7,2,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,97,
		1,0,0,0,97,99,5,46,0,0,98,100,7,2,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,
		99,1,0,0,0,101,102,1,0,0,0,102,28,1,0,0,0,103,105,7,3,0,0,104,103,1,0,
		0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,
		109,6,14,0,0,109,30,1,0,0,0,6,0,60,88,95,101,106,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
