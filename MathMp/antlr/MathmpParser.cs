//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Mathmp.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathmpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, CARET=2, LPAREN=3, RPAREN=4, LBRACE=5, RBRACE=6, OPERATOR=7, FORWARDSLASH=8, 
		DOT=9, SQRT=10, IDENTIFIER=11, PERIOD=12, NUMBER=13, WS=14;
	public const int
		RULE_file = 0, RULE_math = 1, RULE_expression = 2, RULE_operator = 3, 
		RULE_identifier = 4, RULE_number = 5;
	public static readonly string[] ruleNames = {
		"file", "math", "expression", "operator", "identifier", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\n'", "'^'", "'('", "')'", "'{'", "'}'", null, "'/'", "'dot'", 
		"'sqrt'", null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "CARET", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "OPERATOR", 
		"FORWARDSLASH", "DOT", "SQRT", "IDENTIFIER", "PERIOD", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Mathmp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathmpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MathmpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MathmpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathContext[] math() {
			return GetRuleContexts<MathContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathContext math(int i) {
			return GetRuleContext<MathContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11946L) != 0)) {
				{
				{
				State = 12;
				math();
				State = 13;
				Match(T__0);
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathContext math() {
		MathContext _localctx = new MathContext(Context, State);
		EnterRule(_localctx, 2, RULE_math);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11944L) != 0)) {
				{
				{
				State = 20;
				expression(0);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterIdentifierExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitIdentifierExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperscriptExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(MathmpParser.CARET, 0); }
		public SuperscriptExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSuperscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSuperscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperscriptExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperatorExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterOperatorExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitOperatorExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(MathmpParser.PERIOD, 0); }
		public SubscriptExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSubscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSubscriptExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MathmpParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MathmpParser.RPAREN, 0); }
		public ParenExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterParenExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitParenExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(MathmpParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(MathmpParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BracedExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterBracedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitBracedExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MathmpParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SqrtExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterSqrtExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitSqrtExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARDSLASH() { return GetToken(MathmpParser.FORWARDSLASH, 0); }
		public DivExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitDivExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitNumberExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MathmpParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DotExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterDotExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitDotExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				{
				_localctx = new BracedExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 27;
				Match(LBRACE);
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11944L) != 0)) {
					{
					{
					State = 28;
					expression(0);
					}
					}
					State = 33;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 34;
				Match(RBRACE);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35;
				Match(LPAREN);
				State = 36;
				expression(0);
				State = 37;
				Match(RPAREN);
				}
				break;
			case DOT:
				{
				_localctx = new DotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39;
				Match(DOT);
				State = 40;
				expression(8);
				}
				break;
			case SQRT:
				{
				_localctx = new SqrtExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41;
				Match(SQRT);
				State = 42;
				expression(4);
				}
				break;
			case OPERATOR:
				{
				_localctx = new OperatorExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43;
				@operator();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44;
				identifier();
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 57;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new SubscriptExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 48;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 49;
						Match(PERIOD);
						State = 50;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new SuperscriptExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 51;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 52;
						Match(CARET);
						State = 53;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new DivExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 54;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 55;
						Match(FORWARDSLASH);
						State = 56;
						expression(6);
						}
						break;
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(MathmpParser.OPERATOR, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MathmpParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MathmpParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathmpListener typedListener = listener as IMathmpListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathmpVisitor<TResult> typedVisitor = visitor as IMathmpVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 10, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,14,69,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		5,0,16,8,0,10,0,12,0,19,9,0,1,1,5,1,22,8,1,10,1,12,1,25,9,1,1,2,1,2,1,
		2,5,2,30,8,2,10,2,12,2,33,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,47,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,58,8,2,10,2,
		12,2,61,9,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,0,1,4,6,0,2,4,6,8,10,0,0,74,0,
		17,1,0,0,0,2,23,1,0,0,0,4,46,1,0,0,0,6,62,1,0,0,0,8,64,1,0,0,0,10,66,1,
		0,0,0,12,13,3,2,1,0,13,14,5,1,0,0,14,16,1,0,0,0,15,12,1,0,0,0,16,19,1,
		0,0,0,17,15,1,0,0,0,17,18,1,0,0,0,18,1,1,0,0,0,19,17,1,0,0,0,20,22,3,4,
		2,0,21,20,1,0,0,0,22,25,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,3,1,0,0,
		0,25,23,1,0,0,0,26,27,6,2,-1,0,27,31,5,5,0,0,28,30,3,4,2,0,29,28,1,0,0,
		0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,0,0,0,33,31,1,0,0,
		0,34,47,5,6,0,0,35,36,5,3,0,0,36,37,3,4,2,0,37,38,5,4,0,0,38,47,1,0,0,
		0,39,40,5,9,0,0,40,47,3,4,2,8,41,42,5,10,0,0,42,47,3,4,2,4,43,47,3,6,3,
		0,44,47,3,8,4,0,45,47,3,10,5,0,46,26,1,0,0,0,46,35,1,0,0,0,46,39,1,0,0,
		0,46,41,1,0,0,0,46,43,1,0,0,0,46,44,1,0,0,0,46,45,1,0,0,0,47,59,1,0,0,
		0,48,49,10,7,0,0,49,50,5,12,0,0,50,58,3,4,2,8,51,52,10,6,0,0,52,53,5,2,
		0,0,53,58,3,4,2,7,54,55,10,5,0,0,55,56,5,8,0,0,56,58,3,4,2,6,57,48,1,0,
		0,0,57,51,1,0,0,0,57,54,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,
		0,0,60,5,1,0,0,0,61,59,1,0,0,0,62,63,5,7,0,0,63,7,1,0,0,0,64,65,5,11,0,
		0,65,9,1,0,0,0,66,67,5,13,0,0,67,11,1,0,0,0,6,17,23,31,46,57,59
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
